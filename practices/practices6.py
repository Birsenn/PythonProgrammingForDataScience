#Search Insert Position
#Example 1:
#Input: nums = [1,3,5,6], target = 5
#Output: 2
#Example 2
#Input: nums = [1,3,5,6], target = 2
#Output: 1
#Solution
def searchInsert(nums, target):
    try:
        return nums.index(target)
    except ValueError:
        nums.append(target)
        nums.sort()
        return nums.index(target)

##################################################################
#Power of Four
#Given an integer n, return true if it is a power of four. Otherwise, return false.
#An integer n is a power of four, if there exists an integer x such that n == 4x.
#Solution
def isPowerofFour(17179869184):
    return n in [4 ** i for i in range(0, 16)]

##################################################################
#Find the Difference
#You are given two strings s and t. String t is generated by random shuffling string s and then add one more letter at a random position.
#Solution
Return the letter that was added to t.
def findTheDifference(s, t):
    for i in t:
        if s.count(i) != t.count(i):
            return i

##################################################################
#Is Subsequence
#Given two strings s and t, return true if s is a subsequence of t, or false otherwise.
#A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the
#characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while
#"aec" is not).
#Solution
def isSubsequence(s, t):
    i, j = 0, 0
    while i < len(s) and j < len(t):
        if s[i] == t[j]:
            i += 1
        j += 1
    return True if i == len(s) else False

#######################################################################################################################
#Longest Palindrome
#Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built
#with those letters.
#Letters are case sensitive, for example, "Aa" is not considered a palindrome here.
#####Solution
def longestPalindrome(s):
    soz = {}
    for i in s:
        if i not in soz:
            soz[i] = 1
        else:
            soz[i] += 1
    res = 0
    odd = 0
    if len(soz) == 1:
        return soz[s[0]]
    for j in soz.values():
        if j > 1:
            if j % 2 == 0:
                res += j
            else:
                res += j - 1
                odd += 1
        else:
            odd += 1
    if odd > 0:
        res += 1
    return res

####################################################################
#Fizz Buzz
#Given an integer n, return a string array answer (1-indexed) where:
#answer[i] == "FizzBuzz" if i is divisible by 3 and 5.
#answer[i] == "Fizz" if i is divisible by 3.
#answer[i] == "Buzz" if i is divisible by 5.
#answer[i] == i (as a string) if none of the above conditions are true.
#Solution
def fizzBuzz(n):
    liste = range(1, n+1)
    lst = []
    for i in liste:
        if i%3 != 0 and i%5 != 0:
            lst.append(str(i))
        elif i%3 == 0 and i%5 == 0:
            lst.append("FizzBuzz")
        elif i%3 == 0:
            lst.append("Fizz")
        elif i%5 == 0:
            lst.append("Buzz")
    return lst
